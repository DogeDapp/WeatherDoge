def gitRev = {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return 'nogit';
    }
}

Closure<String[]> getVersionDef = {
    new File('WeatherDoge/versionDef.txt').text.trim().split('\\r?\\n')
}

Closure<String> getVersionNameSuffix = { flavor ->
    flavor + '-' + gitRev()
}

apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion '28.0.3'
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
        applicationId "com.versobit.weatherdoge"
        versionCode getVersionDef()[0].toInteger()
        versionName getVersionDef()[1]
        buildConfigField 'String', 'FLAVOR_PLAY', '"play"'
        buildConfigField 'String', 'FLAVOR_FOSS', '"foss"'
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    flavorDimensions 'version'
    productFlavors {
        play {
            versionNameSuffix getVersionNameSuffix('p')
        }
        foss {
            dimension 'version'
            applicationIdSuffix '.foss'
            versionNameSuffix getVersionNameSuffix('f')
        }
    }
}

dependencies {
    playImplementation 'com.google.android.gms:play-services-location:10.2.0'
    implementation 'commons-io:commons-io:2.5'
    implementation 'org.apache.commons:commons-lang3:3.5'
    implementation 'com.android.support:support-v4:25.4.0'
    implementation 'com.android.support:design:25.4.0'
    implementation 'com.getbase:floatingactionbutton:1.10.1'
    implementation 'com.plattysoft.leonids:LeonidsLib:1.3.2'
}

// Find and apply the signing file
// See signing.template.gradle for more information
if (project.hasProperty('signing.file')) {
    if (new File(project.property('signing.file') as String).exists()) {
        apply from: project.property('signing.file')
    } else {
        throw new InvalidUserDataException('Signing configuration file does not exist: ' +
                project.property('signing.file'))
    }
} else {
    logger.log(LogLevel.WARN, 'WARNING: No signing configuration file defined.')
}
