import org.apache.tools.ant.taskdefs.condition.Os;

def getVersionCode = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine './versionCode.sh'
            standardOutput = stdout
        }
        return stdout.toString().trim().toInteger()
    }
    catch (ignored) {
        return null;
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine './versionName.sh'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}
apply plugin: 'android'

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 19
        versionCode getVersionCode()
        versionName getVersionName()
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

dependencies {
    compile 'com.google.android.gms:play-services:+'
    compile 'com.android.support:support-v4:+'
    compile files('libs/commons-io-2.4.jar')

    /*
    def nativeLibs = new File("$buildDir/native-libs")
    if(!nativeLibs.exists()) {
        nativeLibs.mkdirs();
    }
    new File("$nativeLibs/native-libs.jar").createNewFile()
    compile fileTree(dir: nativeLibs)
    */
}

task ndkBuild(type: Exec) {
    if(Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'ndk-build.cmd'
    } else {
        commandLine 'ndk-build'
    }
}

tasks.withType(JavaCompile) {
    // Only works if you're building from the CLI when the NDK is in your PATH :(
    //compileTask -> compileTask.dependsOn(ndkBuild)
}

task nativeLibsToJar(type: Zip) {
    destinationDir file("$buildDir/native-libs")
    baseName "native-libs"
    extension "jar"
    from fileTree(dir: "libs", include: "**/*.so")
    into "lib/"
}

tasks.withType(JavaCompile) {
    //compileTask -> compileTask.dependsOn(nativeLibsToJar)
}
